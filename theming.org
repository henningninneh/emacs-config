#+TITLE: Theming and Usability Settings

* Color Theme
#+begin_src emacs-lisp
  (setq custom-safe-themes t)
  (load-theme 'dracula t)
#+end_src

* More colors in dired
For different file types
#+begin_src emacs-lisp
(use-package dired-rainbow
  :config
  (progn
    (dired-rainbow-define-chmod directory "#6cb2eb" "d.*")
    (dired-rainbow-define html "#eb5286" ("css" "less" "sass" "scss" "htm" "html" "jhtm" "mht" "eml" "mustache" "xhtml"))
    (dired-rainbow-define xml "#f2d024" ("xml" "xsd" "xsl" "xslt" "wsdl" "bib" "json" "msg" "pgn" "rss" "yaml" "yml" "rdata"))
    (dired-rainbow-define document "#9561e2" ("docm" "doc" "docx" "odb" "odt" "pdb" "pdf" "ps" "rtf" "djvu" "epub" "odp" "ppt" "pptx"))
    (dired-rainbow-define markdown "#ffed4a" ("org" "etx" "info" "markdown" "md" "mkd" "nfo" "pod" "rst" "tex" "textfile" "txt"))
    (dired-rainbow-define database "#6574cd" ("xlsx" "xls" "csv" "accdb" "db" "mdb" "sqlite" "nc"))
    (dired-rainbow-define media "#de751f" ("mp3" "mp4" "MP3" "MP4" "avi" "mpeg" "mpg" "flv" "ogg" "mov" "mid" "midi" "wav" "aiff" "flac"))
    (dired-rainbow-define image "#f66d9b" ("tiff" "tif" "cdr" "gif" "ico" "jpeg" "jpg" "png" "psd" "eps" "svg"))
    (dired-rainbow-define log "#c17d11" ("log"))
    (dired-rainbow-define shell "#f6993f" ("awk" "bash" "bat" "sed" "sh" "zsh" "vim"))
    (dired-rainbow-define interpreted "#38c172" ("py" "ipynb" "rb" "pl" "t" "msql" "mysql" "pgsql" "sql" "r" "clj" "cljs" "scala" "js"))
    (dired-rainbow-define compiled "#4dc0b5" ("asm" "cl" "lisp" "el" "c" "h" "c++" "h++" "hpp" "hxx" "m" "cc" "cs" "cp" "cpp" "go" "f" "for" "ftn" "f90" "f95" "f03" "f08" "s" "rs" "hi" "hs" "pyc" ".java"))
    (dired-rainbow-define executable "#8cc4ff" ("exe" "msi"))
    (dired-rainbow-define compressed "#51d88a" ("7z" "zip" "bz2" "tgz" "txz" "gz" "xz" "z" "Z" "jar" "war" "ear" "rar" "sar" "xpi" "apk" "xz" "tar"))
    (dired-rainbow-define packaged "#faad63" ("deb" "rpm" "apk" "jad" "jar" "cab" "pak" "pk3" "vdf" "vpk" "bsp"))
    (dired-rainbow-define encrypted "#ffed4a" ("gpg" "pgp" "asc" "bfe" "enc" "signature" "sig" "p12" "pem"))
    (dired-rainbow-define fonts "#6cb2eb" ("afm" "fon" "fnt" "pfb" "pfm" "ttf" "otf"))
    (dired-rainbow-define partition "#e3342f" ("dmg" "iso" "bin" "nrg" "qcow" "toast" "vcd" "vmdk" "bak"))
    (dired-rainbow-define vc "#0074d9" ("git" "gitignore" "gitattributes" "gitmodules"))
    (dired-rainbow-define-chmod executable-unix "#38c172" "-.*x.*")
    ))
#+end_src
* Open files with xdg-open (standard desktop apps) in Dired
Just hit C-c o

#+begin_src emacs-lisp
(defun dired-open-file ()
  "In dired, open the file named on this line."
  (interactive)
  (let* ((file (dired-get-filename nil t)))
    (call-process "xdg-open" nil 0 nil file)))
(define-key dired-mode-map (kbd "C-c o") 'dired-open-file)
#+end_src

* Icons
Icons are provided by the packages all-the-icons and vscode-icon. The
packages also allows you to simply inserts incons into text.

NOTE: After the first run, you need to manually call `M-x
all-the-icons-install-fonts` !

This loads all-the-icons if we're in a graphical terminal:
#+begin_src emacs-lisp
  (use-package all-the-icons :if (display-graphic-p))
#+end_src

This loads vscode-icon if we're in a graphical terminal:
#+begin_src emacs-lisp
    (use-package vscode-icon
      :ensure t
      :commands (vscode-icon-for-file)
      :if (display-graphic-p))
#+end_src

Adding icons to completion candidates and the ibuffer menu:
#+begin_src emacs-lisp
(all-the-icons-completion-mode 1)
(all-the-icons-ibuffer-mode 1)
#+end_src

Adding icons to dired:
#+begin_src emacs-lisp
(add-hook 'dired-mode-hook 'all-the-icons-dired-mode)
#+end_src

* Windows, Fonts, and Bars
#+begin_src emacs-lisp 

  (setq
   default-frame-alist '((font . "Berkeley Mono 10"))
   frame-title-format '(buffer-file-name "%f" ("%b"))
   visible-bell 't 
   echo-keystrokes 0.1
   font-lock-maximum-decoration t
   font-lock-verbose nil
   inhibit-startup-message t
   delete-by-moving-to-trash t
   shift-select-mode nil
   truncate-partial-width-windows nil
   uniquify-buffer-name-style 'forward
   ediff-window-setup-function 'ediff-setup-windows-plain
   ediff-split-window-function 'split-window-horizontally
   whitespace-line-column 100
   whitespace-style '(trailing lines space-before-tab
                               indentation space-after-tab)
   )
  (tooltip-mode 1)
  (tool-bar-mode -1)
  (blink-cursor-mode 1)
  (xterm-mouse-mode t)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
#+end_src

* Font Ligatures

Requires Emacs Major Version higher than 27.

Not all modes where you want code ligatures may derive from prog-mode,
so you may also want to call ligature-set-ligatures with other modes
(e.g. html-mode).

See https://github.com/tonsky/FiraCode/wiki/Emacs-instructions

#+begin_src emacs-lisp
;; Enable the www ligature in every possible major mode
(ligature-set-ligatures 't '("www"))

;; Enable ligatures in programming modes                                                           
(ligature-set-ligatures 'prog-mode '("www" "**" "***" "**/" "*>" "*/" "\\\\" "\\\\\\" "{-" "::"
                                     ":::" ":=" "!!" "!=" "!==" "-}" "----" "-->" "->" "->>"
                                     "-<" "-<<" "-~" "#{" "#[" "##" "###" "####" "#(" "#?" "#_"
                                     "#_(" ".-" ".=" ".." "..<" "..." "?=" "??" ";;" "/*" "/**"
                                     "/=" "/==" "/>" "//" "///" "&&" "||" "||=" "|=" "|>" "^=" "$>"
                                     "++" "+++" "+>" "=:=" "==" "===" "==>" "=>" "=>>" "<="
                                     "=<<" "=/=" ">-" ">=" ">=>" ">>" ">>-" ">>=" ">>>" "<*"
                                     "<*>" "<|" "<|>" "<$" "<$>" "<!--" "<-" "<--" "<->" "<+"
                                     "<+>" "<=" "<==" "<=>" "<=<" "<>" "<<" "<<-" "<<=" "<<<"
                                     "<~" "<~~" "</" "</>" "~@" "~-" "~>" "~~" "~~>" "%%"))

(global-ligature-mode 't)
#+end_src

* Default Browser
#+begin_src emacs-lisp 
 (setq browse-url-browser-function 'browse-url-firefox)
; (setq browse-url-browser-function 'browse-url-chromium)
; (setq browse-url-browser-function 'browse-url-generic)
#+end_src
* Sidebar
Shows a nifty sidebar with a directory tree structure and with basic
file editing commands. Press f8 to toggle. 

Activate one of the sidebars by setting "tangle:" to "yes".

** Option 1: Neotree (deactivated)
For details and keybindings see
https://github.com/jaypei/emacs-neotree

#+begin_src emacs-lisp tangle: no
  (require 'neotree)
  (global-set-key [f8] 'neotree-toggle)
  (setq neo-smart-open t) ; start neotree in current working dir
#+end_src

** Option 2: Dired-sidebar (active)
For details and keybindings see
https://github.com/jojojames/dired-sidebar

For customization see dired-sidebar.el

Somehow, the truncation doesn't work.

#+begin_src emacs-lisp tangle: yes
  (use-package dired-sidebar
    :bind (([f8] . dired-sidebar-toggle-sidebar))
    :ensure t
    :commands (dired-sidebar-toggle-sidebar)
    :init
    (add-hook 'dired-sidebar-mode-hook
              (lambda ()
                (unless (file-remote-p default-directory)
                  (auto-revert-mode))))
    ;; don't wrap long filenames. `truncate-lines' is automatically
    ;; buffer-local, so this should not affec dired-buffers
    (add-hook 'dired-sidebar-mode-hook
              (lambda () 
                (setq truncate-lines t)
              (visual-line-mode -1)))
    :config
    (push 'toggle-window-split dired-sidebar-toggle-hidden-commands)
    (push 'rotate-windows dired-sidebar-toggle-hidden-commands)
    ; (setq dired-sidebar-theme 'vscode) ; depends on vscode-icon
    ; package, disabled because of duplicate icons showing up due to the
    ; dired-hook to all-the-icons above
    (setq dired-sidebar-use-term-integration t)
    (setq dired-sidebar-use-custom-font t))
#+end_src

* Transparently open compressed files
#+begin_src emacs-lisp
  (auto-compression-mode t)
#+end_src
* Enable syntax highlighting 
#+begin_src emacs-lisp
  (global-font-lock-mode t)
#+end_src
* Save a list of recently visited files
Recentf-mode allows quick access to recently visited files.

#+begin_src emacs-lisp 
  (recentf-mode t)
  (setq save-place-file "~/.emacs.d/places")
  (add-to-list 'recentf-exclude "ido.last")
#+end_src

* ido mode and flx-ido
#+begin_src emacs-lisp 
  (when (> emacs-major-version 21)
    (require 'flx-ido) 
    (ido-mode t)
    (ido-everywhere 1)
    (setq ido-enable-prefix nil
          ido-enable-flex-matching t
          ido-create-new-buffer 'always
          ido-use-filename-at-point nil
          ido-use-faces nil
          ido-max-prospects 10))
#+end_src
* Tabs, imenu and flyspell hooks

#+begin_src emacs-lisp 
  (set-default 'indent-tabs-mode nil)
  (set-default 'indicate-empty-lines t)
  (set-default 'imenu-auto-rescan t)
  
  (add-hook 'text-mode-hook 'turn-on-auto-fill)
  (add-hook 'text-mode-hook 'turn-on-flyspell)
  (add-hook 'LaTeX-mode-hook 'turn-on-flyspell)
  (add-hook 'markdown-mode-hook 'turn-on-flyspell)
  (add-hook 'org-mode-hook 'turn-on-flyspell)
#+end_src
* Better modeline
#+begin_src emacs-lisp
  (require 'powerline)
  (powerline-default-theme)
#+end_src
* Curb Hippie expand
#+begin_src emacs-lisp
  (delete 'try-expand-line hippie-expand-try-functions-list)
  (delete 'try-expand-list hippie-expand-try-functions-list)
#+end_src

* No backup files (~ files)
#+begin_src emacs-lisp
(setq make-backup-files nil) ;; stop creating those backup~ files
(setq auto-save-default nil) ;; stop creating those #autosave# files
#+end_src

* Associate modes with file extensions
#+begin_src emacs-lisp
(add-to-list 'auto-mode-alist '("COMMIT_EDITMSG$" . diff-mode))
(add-to-list 'auto-mode-alist '("\\.css$" . css-mode))
(require 'yaml-mode)
(add-to-list 'auto-mode-alist '("\\.ya?ml$" . yaml-mode))
(add-to-list 'auto-mode-alist '("\\.rb$" . ruby-mode))
(add-to-list 'auto-mode-alist '("Rakefile$" . ruby-mode))
#+end_src

* Unified diff
#+begin_src emacs-lisp
(setq diff-switches "-u")
#+end_src
* Color Theme Tweaks for Org and LaTeX
These settings adjust the height of some headings in Org and LaTeX
mode, as well as turning off the sans-serif heading style that AucTeX
defaults to.

#+begin_src emacs-lisp
  (add-hook 'latex-mode-hook 
            (lambda ()
              (set-face-attribute 'font-latex-sectioning-5-face nil :inherit nil :foreground "#b58900")
              (set-face-attribute 'font-latex-sectioning-0-face nil :height 3)
              (set-face-attribute 'font-latex-sectioning-1-face nil :height 2)
              (set-face-attribute 'font-latex-sectioning-2-face nil :height 1.5)
              (set-face-attribute 'font-latex-sectioning-3-face nil :height 1.2)
              (set-face-attribute 'font-latex-sectioning-4-face nil :height 1.0)))
  
   (add-hook 'org-mode-hook 
             (lambda ()
               (set-face-attribute 'org-level-1 nil :height 1.5)
               (set-face-attribute 'org-level-2 nil :height 1.2)
               (set-face-attribute 'org-level-3 nil :height 1.1)
               (set-face-attribute 'org-level-4 nil :height 1.1)
               (set-face-attribute 'org-level-5 nil :height 1.1)))
#+end_src
* Uniquify Buffer Names
When you have buffers with the same filenames in different folders. 
#+begin_src emacs-lisp
  (require 'uniquify)
  (setq uniquify-buffer-name-style 'post-forward-angle-brackets)  
#+end_src
* Start Emacs with an eshell open

#+begin_src emacs-lisp
(add-hook 'emacs-startup-hook 'eshell)
#+end_src

* Silent auto-revert
Prevent auto-revert-mode from clogging the minibuffer mit status messages
#+begin_src emacs-lisp
(setq auto-revert-verbose nil)
#+end_src

* Transparency
#+begin_src emacs-lisp
(setq transparency_level 0)
(defun transparency ()
  "Toggle transparency of Emacs between 3 settings (none, mild, moderate)."
  (interactive)
  (if (equal transparency_level 0)
      (progn (set-frame-parameter (selected-frame) 'alpha '(75 . 85))
         (setq transparency_level 1))
    (if (equal transparency_level 1)
    (progn (set-frame-parameter (selected-frame) 'alpha '(50 . 85))
           (setq transparency_level 2))
      (if (equal transparency_level 2)
      (progn (set-frame-parameter (selected-frame) 'alpha '(100 . 85))
         (setq transparency_level 0)))
      )))
(define-key global-map (kbd "C-c t") 'transparency)
#+end_src
* Show non-matching parents
#+begin_src emacs-lisp tangle: no
(show-paren-mode)
#+end_src

Alternative:

#+begin_src emacs-lisp tangle: yes
(show-smartparens-mode)
#+end_src
* Show full path in minibuffer
#+begin_src emacs-lisp
(defun show-file-name ()
  "Show the full path file name in the minibuffer."
  (interactive)
  (message (buffer-file-name)))

(global-set-key (kbd "C-x p") 'show-file-name)
#+end_src
* Emoji 🐸
#+begin_src emacs-lisp g
(use-package emojify
  :config
  (when (member "Noto Color Emoji" (font-family-list))
    (set-fontset-font
     t 'symbol (font-spec :family "Noto Color Emoji") nil 'prepend))
  (setq emojify-display-style 'unicode)
  (setq emojify-emoji-styles '(unicode))
  (bind-key* (kbd "C-c .") #'emojify-insert-emoji)) ; override binding in any mode
#+end_src

