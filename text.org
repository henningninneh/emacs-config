#+Title: Text Management and Appearance

* Line wrapping and position
    Sane line wrapping and scrolling for long documents and
    papers. Plus a function for removing any hard-returns in a
    document. 

#+begin_src emacs-lisp

  (when (fboundp 'adaptive-wrap-prefix-mode)
    (defun my-activate-adaptive-wrap-prefix-mode ()
      "Toggle `visual-line-mode' and `adaptive-wrap-prefix-mode' simultaneously."
      (adaptive-wrap-prefix-mode (if visual-line-mode 1 -1)))
    (add-hook 'visual-line-mode-hook 'my-activate-adaptive-wrap-prefix-mode))
    (global-visual-line-mode t)

    ;;; prefer auto-fill to visual line wrap in ESS mode
    (add-hook 'ess-mode-hook 'turn-on-auto-fill)
    (add-hook 'inferior-ess-mode-hook 'turn-on-auto-fill) 

    ;;; but turn off auto-fill in tex and markdown
    (add-hook 'markdown-mode-hook 'turn-off-auto-fill)
    (add-hook 'latex-mode-hook 'turn-off-auto-fill)

    ;; smooth-scrolling 
    (require 'smooth-scrolling)

    ;; more smooth efforts.
    (setq-default 
    scroll-conservatively 0
    scroll-up-aggressively 0.01
    scroll-down-aggressively 0.01)

#+end_src
* Smart parentheses
   Smart autopairing of quotes and parentheses. 
#+begin_src emacs-lisp 
  (smartparens-global-mode 1)
  (require 'smartparens-config)
  (show-smartparens-global-mode +1)
#+end_src

* Markdown 
** Basic Markdown mode support

Automatically chose markdown mode, based on file extension.

#+begin_src emacs-lisp
      (autoload 'markdown-mode "markdown-mode"
      "Major mode for editing Markdown files" t)
      (setq auto-mode-alist
      (cons '("\\.Markdown" . markdown-mode) auto-mode-alist)
      )
      (setq auto-mode-alist
      (cons '("\\.MarkDown" . markdown-mode) auto-mode-alist)
      )
      (setq auto-mode-alist
      (cons '("\\.markdown" . markdown-mode) auto-mode-alist)
      )
      (setq auto-mode-alist
      (cons '("\\.md" . markdown-mode) auto-mode-alist)
      )
      (setq auto-mode-alist
      (cons '("README\\.md" . gfm-mode) auto-mode-alist)
      )
#+end_src

Align keybindings with org-mode

#+begin_src emacs-lisp
  (add-hook 'markdown-mode-hook
            (lambda ()
   (local-set-key (kbd "<M-right>") 'markdown-demote)
   (local-set-key (kbd "<M-left>") 'markdown-promote)
   (local-set-key (kbd "<M-up>") 'markdown-move-up)
   (local-set-key (kbd "<M-down>") 'markdown-move-down)))
#+end_src

** Live preview in markdown app (disabled)

Either find a Marked.app replacement for Linux or change to preview in browser

#+begin_src emacs-lisp :tangle no

   ;; This function will open Marked.app and monitor the current markdown document
   ;; for anything changes.  In other words, it will live reload and convert the
   ;; markdown documment
   (defun markdown-preview-file ()
     "run Marked on the current file and revert the buffer"
     (interactive)
     (shell-command
      (format "open -a /Applications/Marked\\ 2.app %s"
              (shell-quote-argument (buffer-file-name))))
     )  
   (global-set-key "\C-co" 'markdown-preview-file) 

  (add-hook 'markdown-mode-hook 'latex-unicode-simplified)

#+end_src

** Live preview in Emacs (eww)

Allows live-preview of rendered markdown in separate browser buffer.
The paths need to be adapted to the local system. Requires pandoc with
pandoc-citeproc and pandoc-crossref

Toggle with C-c C-c l

*** Version for Syllabus
#+begin_src emacs-lisp :tangle no
  (setq markdown-command '"pandoc -r markdown+simple_tables+table_captions+yaml_metadata_block+smart -w html --template=/home/henning/.pandoc/templates/html.template --css=/home/henning/.pandoc/marked/kultiad-serif.css --filter pandoc-citeproc --csl=/home/henning/.pandoc/csl/chicago-syllabus.csl --bibliography=/home/henning/cloud/misc/references.bib")
  (setq markdown-command-needs-filename t)
#+end_src

*** Version for Papers
#+begin_src emacs-lisp :tangle yes
  (setq markdown-command '"pandoc -r markdown+simple_tables+table_captions+yaml_metadata_block+smart -w html --template=/home/henning/.pandoc/templates/html.template --css=/home/henning/.pandoc/marked/kultiad-serif.css -F pandoc-crossref -F pandoc-citeproc --csl=/home/henning/.pandoc/csl/chicago-author-date.csl --bibliography=/home/henning/cloud/misc/references.bib")
  (setq markdown-command-needs-filename t)
#+end_src

* CSV mode
View and edit CSV files. See [[http://centaur.maths.qmul.ac.uk/Emacs/][the CSV mode homepage]] for more details. From the readme:

In CSV mode, the following commands are available:

- C-c C-s (`csv-sort-fields') and C-c C-n (`csv-sort-numeric-fields')
  respectively sort lexicographically and numerically on a
  specified field or column.

- C-c C-r (`csv-reverse-region') reverses the order.  (These
  commands are based closely on, and use, code in `sort.el'.)

- C-c C-k (`csv-kill-fields') and C-c C-y (`csv-yank-fields') kill
  and yank fields or columns, although they do not use the normal
  kill ring.  C-c C-k can kill more than one field at once, but
  multiple killed fields can be yanked only as a fixed group
  equivalent to a single field.

- C-c C-a (`csv-align-fields') aligns fields into columns

- C-c C-u (`csv-unalign-fields') undoes such alignment; separators
  can be hidden within aligned records.

- C-c C-t (`csv-transpose') interchanges rows and columns.  For
  details, see the documentation for the individual commands.

#+begin_src elisp
(add-to-list 'auto-mode-alist '("\\.[Cc][Ss][Vv]\\'" . csv-mode))
(autoload 'csv-mode "csv-mode"
  "Major mode for editing comma-separated value files." t)
#+end_src

#+begin_src emacs-lisp
  (message "Text config loaded.")
#+end_src

* Unfill paragraph
Functions providing the inverse of Emacs' fill-paragraph and
fill-region
Usage:
- M-x unfill-region
- M-x unfill-paragraph
- M-x unfill-toggle

#+begin_src emacs-lisp
(local-set-key (kbd "<f6>") 'unfill-region)
#+end_src

