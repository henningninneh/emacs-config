#+TITLE: Key Bindings, Usability, and Theming

Defining some key-bindings and usability features below.

** Align your code in a pretty way.
#+begin_src emacs-lisp
(global-set-key (kbd "C-x \\") 'align-regexp)
#+end_src

** Indent code in a pretty way
#+begin_src emacs-lisp
(global-set-key (kbd "C-x a") 'join-line)
#+end_src

** Auto-completion with hippie-expand
#+begin_src emacs-lisp 
(global-set-key (kbd "M-/") 'hippie-expand)
#+end_src

** Turn on the menu bar for exploring new modes
#+begin_src emacs-lisp 
(global-set-key [f1] 'menu-bar-mode)
#+end_src

** Change font size
#+begin_src emacs-lisp 
(global-set-key (kbd "C-+") 'text-scale-increase)
(global-set-key (kbd "C--") 'text-scale-decrease)
#+end_src

** Search and Replace with regular expressions

The visual-regexp pacakge is a very convenient way to dynamically
build regular expressions for searching and replacing. You enter a
minibuffer that lets you type the regexp and the prospective matches
to the expression you type are highlighted in the main buffer. =M-x
vr/replace= gives you global replacement and =M-x vr/query-replace=
lets you decide to replace per match.

#+begin_src emacs-lisp
  (global-set-key (kbd "C-s") 'isearch-forward-regexp)
  (global-set-key (kbd "C-r") 'isearch-backward-regexp)
  (global-set-key (kbd "C-M-s") 'isearch-forward)
  (global-set-key (kbd "C-M-b") 'isearch-backward)
  
  (require 'visual-regexp)
  (global-set-key (kbd "C-c s") 'vr/replace)
  (global-set-key (kbd "C-c r") 'vr/query-replace)
#+end_src

** File finding and iBuffer

#+begin_src emacs-lisp 
  (global-set-key (kbd "C-x M-f") 'ido-find-file-other-window)
  (global-set-key (kbd "C-x C-p") 'find-file-at-point)
  (global-set-key (kbd "C-c y") 'bury-buffer)
  (global-set-key (kbd "C-c R") 'revert-buffer)
  (global-set-key (kbd "M-`") 'file-cache-minibuffer-complete)
  (global-set-key (kbd "C-x C-b") 'ibuffer)
  (global-set-key (kbd "C-x f") 'recentf-ido-find-file)  
#+end_src

iBuffer configuration below

#+begin_src emacs-lisp 
  (setq ibuffer-saved-filter-groups
      '(("home"
	 ("emacs-config" (or (filename . ".emacs.d")
			     (filename . "emacs-config")))
	 ("Org" (or (mode . org-mode)
		    (filename . "OrgMode")))
	 ("Web Dev" (or (mode . html-mode)
			(mode . css-mode)))
	 ("Magit" (name . "\*magit"))
	 ("ESS" (mode . ess-mode))
         ("LaTeX" (mode . latex-mode))
	 ("Help" (or (name . "\*Help\*")
		     (name . "\*Apropos\*")
		     (name . "\*info\*"))))))

        (add-hook 'ibuffer-mode-hook 
	             '(lambda ()
	             (ibuffer-switch-to-saved-filter-groups "home")))
       (setq ibuffer-show-empty-filter-groups nil)                     
       (setq ibuffer-expert t)
       (add-hook 'ibuffer-mode-hook 
       '(lambda ()
       (ibuffer-auto-mode 1)
       (ibuffer-switch-to-saved-filter-groups "home")))
#+end_src

** Browse the Kill Ring
   Navigate the kill-ring in a pop-up buffer.

#+begin_src emacs-lisp 
  (when (require 'browse-kill-ring nil 'noerror)
  (browse-kill-ring-default-keybindings))
#+end_src

** Window switching with Shift-Arrow
=C-x o= goes to the next window, Shift-arrow moves between
them.

#+begin_src emacs-lisp 
(windmove-default-keybindings) 
(global-set-key (kbd "C-x O") (lambda () (interactive) (other-window -1))) ;; back one
(global-set-key (kbd "C-x C-o") (lambda () (interactive) (other-window 2))) ;; forward two
(setq windmove-wrap-around t)
#+end_src

** Window resizing with Shift-Control-Arrow
 
#+begin_src emacs-lisp
  ;; resizing 'windows' (i.e., inside the frame)
  (global-set-key (kbd "S-C-<left>") 'shrink-window-horizontally)
  (global-set-key (kbd "S-C-<right>") 'enlarge-window-horizontally)
  (global-set-key (kbd "S-C-<down>") 'shrink-window)
  (global-set-key (kbd "S-C-<up>") 'enlarge-window)  
#+end_src

** Window rotating with C-c m

#+begin_src emacs-lisp
   (defun rotate-windows ()
     "Rotate your windows" (interactive) (cond ((not (> (count-windows) 1)) (message "You can't rotate a single window!"))
  (t
   (setq i 1)
   (setq numWindows (count-windows))
   (while  (< i numWindows)
     (let* (
            (w1 (elt (window-list) i))
            (w2 (elt (window-list) (+ (% i numWindows) 1)))
            (b1 (window-buffer w1))
            (b2 (window-buffer w2))
            (s1 (window-start w1))
            (s2 (window-start w2))
            )
       (set-window-buffer w1  b2)
       (set-window-buffer w2 b1)
       (set-window-start w1 s2)
       (set-window-start w2 s1)
       (setq i (1+ i)))))))

  (global-set-key (kbd "C-c m") 'rotate-windows)
#+end_src
** Window transpositions with transpose-frame
Swap frame arrangements: M-x- ...
+ transpose-frame: swap x-direction and y-direction 
+ flip-frame: Flip vertically
+ flop-frame: Flop horizontally
+ rotate-frame: Rotate 180 degrees
+ rotate-frame-clockwise: 90 degrees
+ rotate-frame-anti-clockwise: 90 degrees backwards

#+begin_src emacs-lisp
(require 'transpose-frame)
#+end_src

** Start eshell or switch to it if it's active
#+begin_src emacs-lisp 
(global-set-key (kbd "C-x m") 'eshell)
#+end_src

** Start a new eshell even if one is active
#+begin_src emacs-lisp 
(global-set-key (kbd "C-x M") (lambda () (interactive) (eshell t)))
#+end_src

** Start a regular shell
#+begin_src emacs-lisp 
(global-set-key (kbd "C-x M-m") 'shell)
#+end_src

** Start a new regular shell even if one is active
#+begin_src emacs-lisp 
(global-set-key (kbd "C-x M-M") (lambda () (interactive) (shell t)))
#+end_src

** Smex replaces M-x
    Smex replaces M-x, and is built on top of ido-mode. See
    http://github.com/nonsequitur/smex or
    http://www.emacswiki.org/emacs/Smex for details.  
#+begin_src emacs-lisp
  (require 'smex)
  (smex-initialize)  
  (global-set-key (kbd "M-x") 'smex)
  (global-set-key (kbd "C-x C-m") 'smex) ;; supersedes binding in starter-kit-bindings.org
  (global-set-key (kbd "M-X") 'smex-major-mode-commands)
  (global-set-key (kbd "C-x C-M") 'smex-major-mode-commands)
  ;; This is your old M-x.
  (global-set-key (kbd "C-c C-c M-x") 'execute-extended-command)
  (setq smex-show-unbound-commands t)
  (smex-auto-update 30)
#+end_src

** M-x without meta key
#+begin_src emacs-lisp 
(global-set-key (kbd "C-x C-m") 'smex)
#+end_src

** Fetch and display contents at a URL
#+begin_src emacs-lisp
  (global-set-key (kbd "C-c h") 'browse-url-emacs) ; plain text
  (global-set-key (kbd "C-c j") 'browse-url) ; default browser
#+end_src

** Ebib
#+begin_src emacs-lisp
(global-set-key (kbd "C-c e") 'ebib)
#+end_src

** Help should search more than just commands
#+begin_src emacs-lisp 
(global-set-key (kbd "C-h a") 'apropos)
#+end_src

** Magit
#+begin_src emacs-lisp
  (global-set-key (kbd "C-x g") 'magit-status)
#+end_src

** Activate occur inside isearch
#+begin_src emacs-lisp 
(define-key isearch-mode-map (kbd "C-o")
  (lambda () (interactive)
    (let ((case-fold-search isearch-case-fold-search))
      (occur (if isearch-regexp isearch-string (regexp-quote isearch-string))))))
#+end_src

** Store Link for org-mode with C-cl
Org-mode supports [[http://orgmode.org/manual/Hyperlinks.html#Hyperlinks][links]], this command allows you to store links
globally for later insertion into an Org-mode buffer. Defines a global
binding for this  (C-cl means Control-c, then l)
#+begin_src emacs-lisp
(global-set-key "\C-cl" 'org-store-link)
#+end_src

** Winner mode
    Remember the previous window configurations and jump back to them
    as needed (as when, e.g., some other mode messes with your working
    layout.) Rebind the default keys to C-c-up and C-c-down.

#+begin_src emacs-lisp
  (winner-mode 1)
  (global-set-key (kbd "C-c <up>") 'winner-undo)
  (global-set-key (kbd "C-c <down>") 'winner-redo)
#+end_src
** Don't Use Suspend Frame
By default C-z is bound to "Suspend Frame", which minimizes Emacs. Bind it to "Undo" instead. 

#+begin_src emacs-lisp
  (global-set-key (kbd "C-z") 'undo)
#+end_src
** CUA mode for rectangle editing

#+begin_src emacs-lisp
  (setq cua-enable-cua-keys nil)
  (cua-mode)

;; To start a rectangle, use [C-return] and extend it using the normal
;; movement keys (up, down, left, right, home, end, C-home,
;; C-end). Once the rectangle has the desired size, you can cut or
;; copy it using C-w and M-w, and you can
;; subsequently insert it - as a rectangle - using C-y.  So
;; the only new command you need to know to work with cua-mode
;; rectangles is C-return!
;;
;; Normally, when you paste a rectangle using C-v (C-y), each line of
;; the rectangle is inserted into the existing lines in the buffer.
;; If overwrite-mode is active when you paste a rectangle, it is
;; inserted as normal (multi-line) text.
;;
;; And there's more: If you want to extend or reduce the size of the
;; rectangle in one of the other corners of the rectangle, just use
;; [return] to move the cursor to the "next" corner.  Or you can use
;; the [M-up], [M-down], [M-left], and [M-right] keys to move the
;; entire rectangle overlay (but not the contents) in the given
;; direction.
;;
;; [C-return] cancels the rectangle
;; [C-space] activates the region bounded by the rectangle

;; cua-mode's rectangle support also includes all the normal rectangle
;; functions with easy access:
;;
;; [M-a] aligns all words at the left edge of the rectangle
;; [M-b] fills the rectangle with blanks (tabs and spaces)
;; [M-c] closes the rectangle by removing all blanks at the left edge
;;       of the rectangle
;; [M-f] fills the rectangle with a single character (prompt)
;; [M-i] increases the first number found on each line of the rectangle
;;       by the amount given by the numeric prefix argument (default 1)
;;       It recognizes 0x... as hexadecimal numbers
;; [M-k] kills the rectangle as normal multi-line text (for paste)
;; [M-l] downcases the rectangle
;; [M-m] copies the rectangle as normal multi-line text (for paste)
;; [M-n] fills each line of the rectangle with increasing numbers using
;;       a supplied format string (prompt)
;; [M-o] opens the rectangle by moving the highlighted text to the
;;       right of the rectangle and filling the rectangle with blanks.
;; [M-p] toggles virtual straight rectangle edges
;; [M-P] inserts tabs and spaces (padding) to make real straight edges
;; [M-q] performs text filling on the rectangle
;; [M-r] replaces REGEXP (prompt) by STRING (prompt) in rectangle
;; [M-R] reverse the lines in the rectangle
;; [M-s] fills each line of the rectangle with the same STRING (prompt)
;; [M-t] performs text fill of the rectangle with TEXT (prompt)
;; [M-u] upcases the rectangle
;; [M-|] runs shell command on rectangle
;; [M-'] restricts rectangle to lines with CHAR (prompt) at left column
;; [M-/] restricts rectangle to lines matching REGEXP (prompt)
;; [C-?] Shows a brief list of the above commands.

;; [M-C-up] and [M-C-down] scrolls the lines INSIDE the rectangle up
;; and down; lines scrolled outside the top or bottom of the rectangle
;; are lost, but can be recovered using [C-z].
  
#+end_src
** Expand Region
   Expand selected region by semantic units. Just keep pressing the key until it selects what you want.

#+begin_src emacs-lisp
    (require 'expand-region)
    (global-set-key (kbd "M-E") 'er/expand-region)  
#+end_src
** Multiple Cursors
   Use multiple cursors for search, replace, and text-cleaning
   tasks. For a demonstration, see http://emacsrocks.com/e13.html
   First mark the word, then add more cursors. To get out of
   multiple-cursors-mode, press <return> or C-g. The latter will first
   disable multiple regions before disabling multiple cursors. If you
   want to insert a newline in multiple-cursors-mode, use C-j.

#+begin_src emacs-lisp
  (require 'multiple-cursors)
  ;; When you have an active region that spans multiple lines, the following will add a cursor to each line:
  (global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
  
  (global-set-key (kbd "C-S-c C-e") 'mc/edit-ends-of-lines)
  (global-set-key (kbd "C-S-c C-a") 'mc/edit-beginnings-of-lines)
  
  ;; When you want to add multiple cursors not based on continuous lines, but based on keywords in the buffer, use:
  (global-set-key (kbd "C->") 'mc/mark-next-like-this)
  (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
  (global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)
  
  ;; Rectangular region mode
  (global-set-key (kbd "H-SPC") 'set-rectangular-region-anchor)
  
  ;; Mark more like this
  (global-set-key (kbd "H-a") 'mc/mark-all-like-this)
  (global-set-key (kbd "H-p") 'mc/mark-previous-like-this)
  (global-set-key (kbd "H-n") 'mc/mark-next-like-this)
  (global-set-key (kbd "H-S-n") 'mc/mark-more-like-this-extended)
  (global-set-key (kbd "H-S-a") 'mc/mark-all-in-region)
#+end_src
** Use `M-e` for sentence-level navigation, 

... but without having to put two spaces after a period.
#+BEGIN_SRC emacs-lisp
(setq sentence-end-double-space nil)
#+END_SRC emacs-lisp

** Add keybindings for commenting regions of text

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c ;") 'comment-or-uncomment-region)
(global-set-key (kbd "M-'") 'comment-or-uncomment-region)
#+END_SRC emacs-lisp

** Make features available for other routines
#+begin_src emacs-lisp 
(provide 'key-bindings)
#+end_src
** Use emacs everywhere
Invoke the emacs by shortcut. A new Emacs frame will appear,
within which you can type away to your heart’s content. It will
remember which window you have focused.

This requires emacs to be running as daemon.

On Linux, ensure you have the following dependencies satisfied: xclip,
xdotool, xprop, and xwininfo.

See https://github.com/tecosaur/emacs-everywhere
** Message
#+begin_src emacs-lisp
  (message "Key Bindings and Usability Features loaded.")
#+end_src
